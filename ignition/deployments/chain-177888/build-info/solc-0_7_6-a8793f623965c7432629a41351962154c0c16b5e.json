{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_7_6-a8793f623965c7432629a41351962154c0c16b5e",
  "solcVersion": "0.7.6",
  "solcLongVersion": "0.7.6+commit.7338295f",
  "userSourceNameMap": {
    "contracts/lens/UniswapInterfaceMulticall.sol": "project/contracts/lens/UniswapInterfaceMulticall.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "istanbul",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/lens/UniswapInterfaceMulticall.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\n/// @notice A fork of Multicall2 specifically tailored for the Uniswap Interface\r\ncontract UniswapInterfaceMulticall {\r\n    struct Call {\r\n        address target;\r\n        uint256 gasLimit;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        uint256 gasUsed;\r\n        bytes returnData;\r\n    }\r\n\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n\r\n    function multicall(Call[] memory calls) public returns (uint256 blockNumber, Result[] memory returnData) {\r\n        blockNumber = block.number;\r\n        returnData = new Result[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (address target, uint256 gasLimit, bytes memory callData) =\r\n                (calls[i].target, calls[i].gasLimit, calls[i].callData);\r\n            uint256 gasLeftBefore = gasleft();\r\n            (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\r\n            uint256 gasUsed = gasLeftBefore - gasleft();\r\n            returnData[i] = Result(success, gasUsed, ret);\r\n        }\r\n    }\r\n}\r\n"
      }
    }
  }
}